import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from pathlib import Path
from typing import Optional, List
import logging

logger = logging.getLogger(__name__)


class EmailReporter:
    """
    Email reporter for sending security scan reports via email.
    Supports HTML reports with professional formatting.
    """

    def __init__(self):
        self.smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", 587))
        self.smtp_username = os.getenv("SMTP_USERNAME", "meez.sabra@gmail.com")
        self.smtp_password = os.getenv("SMTP_PASSWORD", "1133557799Mm..")
        self.from_email = os.getenv("FROM_EMAIL", self.smtp_username)

    def send_report(
        self,
        scan_result,
        html_content: str,
        to_emails: List[str],
        subject: Optional[str] = None,
    ) -> bool:
        """
        Send security scan report via email.

        Args:
            scan_result: The scan results
            html_content: Generated HTML report content
            to_emails: List of recipient email addresses
            subject: Custom email subject

        Returns:
            bool: True if email sent successfully, False otherwise
        """
        try:
            if not all([self.smtp_server, self.smtp_username, self.smtp_password]):
                logger.error(
                    "Email configuration missing. Please set SMTP environment variables."
                )
                return False

            # Create message
            msg = MIMEMultipart()
            msg["From"] = self.from_email
            msg["To"] = ", ".join(to_emails)
            msg["Subject"] = subject or self._generate_subject(scan_result)

            # Add HTML content
            html_part = MIMEText(html_content, "html")
            msg.attach(html_part)

            # Add alternative text version
            text_content = self._generate_text_content(scan_result)
            text_part = MIMEText(text_content, "plain")
            msg.attach(text_part)

            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)

            logger.info(f"📧 Security report sent to {', '.join(to_emails)}")
            return True

        except Exception as e:
            logger.error(f"❌ Failed to send email: {str(e)}")
            return False

    def _generate_subject(self, scan_result) -> str:
        """Generate email subject based on scan results."""
        target = getattr(scan_result, "target_url", "Unknown")
        risk_score = getattr(scan_result, "risk_score", 0)
        vuln_count = getattr(scan_result, "total_vulnerabilities", 0)

        if risk_score >= 8:
            severity = "🔴 CRITICAL"
        elif risk_score >= 6:
            severity = "🟠 HIGH"
        elif risk_score >= 4:
            severity = "🟡 MEDIUM"
        else:
            severity = "🟢 LOW"

        return (
            f"{severity} Security Report: {target} - {vuln_count} vulnerabilities found"
        )

    def _generate_text_content(self, scan_result) -> str:
        """Generate plain text version of the report."""
        target = getattr(scan_result, "target_url", "Unknown")
        risk_score = getattr(scan_result, "risk_score", 0)
        vuln_count = getattr(scan_result, "total_vulnerabilities", 0)
        duration = getattr(scan_result, "scan_duration", 0)

        text = f"""
HorseSec Security Scan Report
=============================

Target: {target}
Risk Score: {risk_score}/10
Vulnerabilities Found: {vuln_count}
Scan Duration: {duration:.2f}s

Summary:
--------
"""

        # Add vulnerability summary
        severity_counts = {"critical": 0, "high": 0, "medium": 0, "low": 0}
        for detector in getattr(scan_result, "detector_results", []):
            for vuln in getattr(detector, "vulnerabilities", []):
                severity = getattr(vuln, "severity", "low")
                if hasattr(severity, "value"):
                    severity = severity.value
                if severity in severity_counts:
                    severity_counts[severity] += 1

        text += f"""
Critical: {severity_counts['critical']}
High: {severity_counts['high']}  
Medium: {severity_counts['medium']}
Low: {severity_counts['low']}

For detailed information, please view the HTML report attached.

---
Generated by HorseSec Security Scanner
        """

        return text

    def validate_configuration(self) -> bool:
        """Validate email configuration."""
        required_vars = ["SMTP_SERVER", "SMTP_USERNAME", "SMTP_PASSWORD"]
        missing = [var for var in required_vars if not os.getenv(var)]

        if missing:
            logger.error(f"Missing email configuration: {', '.join(missing)}")
            return False

        try:
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
            return True
        except Exception as e:
            logger.error(f"Email configuration test failed: {str(e)}")
            return False
